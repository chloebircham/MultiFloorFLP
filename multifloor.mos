model basic2
  options noimplicit
  uses "mmxprs", "mmsystem" ,"mmxnlp" !, "mmnl"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  declarations
    CeilingHeight: integer  !Height of each floor in the building
    Floors: integer         !Number of Floors in tge building
    Departments: integer    !Number of Departments needing to be placed
    Elevators: integer      !Number of elevators on each floor
    EWidth: real            !The set width of each elevator
    EHeight: real           !The set height of each elevator
    FWidth: real            !The Width of each floor in the whole facility
    FHeight: real           !The Height of each floor in the whole facility
    beta:integer            !parameter for aspect ratio
    datafile: string
    tstart:real
    tend:real
    runtime:real
  end-declarations
  
  !datafile:= "examplebB10floor3d7.dat" !appendixb Beta=10, 3 floors, 7 departments
  datafile:= "example1.dat"

  initialisations from datafile
    Floors
    Departments
    Elevators
    CeilingHeight
    EWidth
    EHeight
    FWidth
    FHeight
    beta
  end-initialisations

declarations
  DArea: array(1..Departments) of real    !Area requirements for each department
  Cost: array(1..Departments,1..Departments) of real
end-declarations

initialisations from datafile
  DArea
  Cost
end-initialisations


  declarations
    FloorsNo= 1..Floors
    DepartmentsNo= 1..Departments
    zik: array(1..Departments+Elevators, FloorsNo) of mpvar                     !Binary array for floor number for each department
    Zij: array(1..Departments+Elevators, 1..Departments+Elevators) of mpvar     !Binary array for floor number for each department
    Xij: array(1..Departments+Elevators, 1..Departments+Elevators) of mpvar     !Binary array for placement of departments in respect to each other
    Yij: array(1..Departments+Elevators, 1..Departments+Elevators) of mpvar     !Binary array for placement of departments in respect to each other
    x: array(1..Departments+Elevators) of mpvar                                 !Centre x coordinate for each department and elevator
    y: array(1..Departments+Elevators) of mpvar                                 !Centre y coordinate for each department and elevator
    dv:array(DepartmentsNo,DepartmentsNo) of mpvar                              !vertical distance between departments
    dh:array(DepartmentsNo,DepartmentsNo) of mpvar                              !horizontal distance on same floor
    de:array(DepartmentsNo,DepartmentsNo) of mpvar                              !horizontal distance on different floors
    DWidth: array(1..Departments+Elevators) of mpvar                                      !Width of each department
    DHeight: array(1..Departments+Elevators) of mpvar                                     !Height of each department
    cost: linctr                                                                !Objective function
    M: real
    fnum:real
    
    !Variables used for  calculating absolute values in constraints!
    tv:array(DepartmentsNo,DepartmentsNo) of mpvar
    tx:array(DepartmentsNo,DepartmentsNo) of mpvar
    ty:array(DepartmentsNo,DepartmentsNo) of mpvar
    te1:array(DepartmentsNo,DepartmentsNo) of mpvar
    te2:array(DepartmentsNo,DepartmentsNo) of mpvar
    te3:array(DepartmentsNo,DepartmentsNo) of mpvar
    te4:array(DepartmentsNo,DepartmentsNo) of mpvar
  end-declarations

tstart:=gettime

!Objective Function: cost calculated as horizontal and vertical distance travelled between every pair of departments
cost:= sum(i in DepartmentsNo, j in DepartmentsNo) (Cost(i,j)*(dv(i,j)+de(i,j) ) )


! forall(i in DepartmentsNo, j in DepartmentsNo)do
! if(i<j)then

! cost +=  Cost(i,j)*(dv(i,j)+de(i,j)) 
! end-if
! end-do


forall(l in 1+Departments..Departments+Elevators)do
DWidth(l)=EWidth
DHeight(l)=EHeight
end-do




!Sufficiently large M for distance calculations
M:= FWidth+FHeight+(CeilingHeight)

!Each Department is only allocated to one floor
!zik=1 if department i located on floor k, zik=0 otherwise
forall(i in DepartmentsNo) do
forall(k in FloorsNo)do
zik(i,k) is_binary
end-do
sum(k in FloorsNo) zik(i,k)=1
end-do


!!!Horizontal distances!!!

!tx constraints: absolute value, difference in x coordinates
!ty constraints: absolute value, difference in y coordinates
!dh: horizontal distance for departments on same floors (distance between coordinates of each dept.)
forall(i,j in DepartmentsNo) do
if (i <j) then

dv(i,j)= CeilingHeight* tv(i,j)
tv(i,j)>= sum(k in FloorsNo) k*(zik(i,k)-zik(j,k))
tv(i,j)>= -sum(k in FloorsNo) k*(zik(i,k)-zik(j,k))

dh(i,j)= tx(i,j) + ty(i,j)
tx(i,j)>= x(i) - x(j)
tx(i,j)>= x(j) - x(i)
ty(i,j)>= y(i) - y(j)
ty(i,j)>= y(j) - y(i)
de(i,j)>=dh(i,j)
de(i,j)>= te1(i,j) + te2(i,j) + te3(i,j) + te4(i,j) - M*Zij(i,j)


if (Elevators>0) then
forall( l in 1..Elevators) do
te1(i,j)>= x(i)-x(l+Departments)
te1(i,j)>= x(l+Departments)-x(i)
te2(i,j)>= y(i)-y(l+Departments)
te2(i,j)>= y(l+Departments)-y(i)
te3(i,j)>= x(j)-x(l+Departments)
te3(i,j)>= x(l+Departments)-x(j)
te4(i,j)>= y(j)-y(l+Departments)
te4(i,j)>= y(l+Departments)-y(j)
end-do
end-if


end-if
end-do


forall(i,j in DepartmentsNo, k in FloorsNo)do
if(i<j)then
Zij(i,j) >= zik(i,k) + zik(j,k) -1
Zij(i,j) <= 1 - zik(i,k) + zik(j,k)
Zij(i,j) <= 1 + zik(i,k) - zik(j,k)
end-if
end-do



forall(i,j in 1..Departments+Elevators)do
if(i<j) then
Xij(i,j) is_binary
Yij(i,j) is_binary

x(i)-x(j) >= 0.5*(DWidth(i) + DWidth(j)) - FWidth*(1-Zij(i,j) + Xij(i,j) + Yij(i,j))
x(j)-x(i) >= 0.5*(DWidth(i) + DWidth(j)) - FWidth*(2- Zij(i,j)-Xij(i,j) + Yij(i,j))
y(i)-y(j) >= 0.5*(DHeight(i) + DHeight(j)) - FHeight*(2-Zij(i,j) +Xij(i,j) - Yij(i,j))
y(j)-y(i) >= 0.5*(DHeight(i) + DHeight(j)) - FHeight*(3-Zij(i,j)-Xij(i,j) - Yij(i,j))

end-if
end-do

!Code for origin at centre
!Ensures each department fits inside the facility, e.g centre point + half width muct be contained in the area of one floor.
forall(i in 1..Departments+Elevators) do
x(i)+0.5*DWidth(i) <= 0.5*FWidth
x(i)-0.5*DWidth(i) >= -0.5*FWidth
y(i)+0.5*DHeight(i)<= 0.5*FHeight
y(i)-0.5*DHeight(i) >= -0.5*FHeight
!Setting ranges for x and y coordinates
-0.5*FWidth<=x(i)
x(i)<=0.5*FWidth
-0.5*FHeight<=y(i)
y(i)<=0.5*FHeight
end-do




!Ensuring height and width satisfy conditions for department areas
forall(i in 1..Departments) do
DWidth(i) * DHeight(i) >= DArea(i)
end-do





!Shaping constraints, short and fat/ long and skinny. E.g. beta=1 sets conditions for perfect squares
forall(i in DepartmentsNo) do
DWidth(i)- beta*DHeight(i)<=0
DHeight(i)- beta*DWidth(i)<=0

end-do








!Ensuring that every elevator is covers all floors
forall(k in FloorsNo) do
forall(i in 1+Departments..Departments+Elevators) do
zik(i,k)=1

end-do
end-do

!ensuring that all elevators share every floor
forall(i in 1..Departments+Elevators, j in 1+Departments..Departments+Elevators) do
if (i<j) then
Zij(i,j)=1
end-if
end-do








!minimise the distanced travelled
!120 continues to solve after 120 seconds until first solution is found
!-120: hard 120 seconds and stops exactly after 120 seconds
!setparam("XPRS_MAXTIME", -3600)
minimise(cost)

tend:= gettime
runtime:= tend-tstart
case getprobstat of
    XPRS_OPT: writeln("Problem status: optimum ")
    XPRS_UNF: writeln("Problem status: unfinished")
    XPRS_INF: writeln("Problem status: inf")
    XPRS_UNB: writeln("Problem status: unbounded")
    XPRS_OTH: writeln("Problem status: failed")
    else writeln("Problem status:? ")
  end-case
setparam('xnlp_verbose', true)
  writeln("runtime is: ", runtime)



  writeln("The Floors the departments are allocated to and their centrepoints:")
  writeln(strfmt("Dep",3), strfmt("F",3), strfmt("      (x,y)",3))
  forall(d in DepartmentsNo)do
  

  forall(j in 1..Floors)do
  if (getsol(zik(d,j))=1) then
  fnum:=j
  end-if
  end-do




 writeln(strfmt(d,3), strfmt(fnum,3), strfmt("(",3), strfmt(getsol(x(d)),2,3), ",", strfmt(getsol(y(d)),2,3), strfmt(")",-3))
 end-do

writeln("")
writeln("With the following Dimensions:")
writeln("")
  writeln("Department       Width x Height")

  forall(d in DepartmentsNo) do
  writeln(strfmt(d,3),"              ", strfmt(getsol(DWidth(d)),2,2)," x  ", strfmt(getsol(DHeight(d)),2,2))
  end-do

forall(e in 1..Elevators)do
writeln("Centre Point of Elevator ", e, ": (", strfmt(getsol(x(Departments+e)),2,2), ",", strfmt(getsol(y(Departments+e)),2,2), ").")
end-do


  writeln("The solution has a cost value of: ", strfmt(getobjval,2,2))




end-model
